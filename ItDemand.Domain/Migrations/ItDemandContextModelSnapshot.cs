// <auto-generated />
using System;
using ItDemand.Domain.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ItDemand.Domain.Migrations
{
    [DbContext(typeof(ItDemandContext))]
    partial class ItDemandContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ItDemand.Domain.Models.ApplicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApplicationTypes");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Contents")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatedById")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("DemandRequestId")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DemandRequestId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessDriver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessDrivers");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessProcessL1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessProcessL1s");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessProcessL2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BusinessProcessL1Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessProcessL1Id");

                    b.ToTable("BusinessProcessL2s");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessProcessL3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("BusinessProcessL2Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessProcessL2Id");

                    b.ToTable("BusinessProcessL3s");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItHeadId");

                    b.ToTable("BusinessUnits");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.Checklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssociatedStandard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ChecklistTemplateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("DemandRequestId")
                        .HasColumnType("int");

                    b.Property<string>("GateReviewDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingMinutesBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingMinutesByUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SequenceNumber")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("WorkflowItemId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistTemplateId");

                    b.HasIndex("DemandRequestId");

                    b.HasIndex("WorkflowItemId");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApproverId")
                        .HasColumnType("int");

                    b.Property<int>("ChecklistId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("SortIndex")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ChecklistId");

                    b.ToTable("ChecklistApprovers");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AcceptedAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChecklistId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomChoices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistId");

                    b.ToTable("ChecklistQuestions");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GateReviewDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkflowItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowItemId");

                    b.ToTable("ChecklistTemplates");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistTemplateApprover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChecklistTemplateId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("SortIndex")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistTemplateId");

                    b.ToTable("ChecklistTemplateApprovers");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistTemplateQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AcceptedAnswers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChecklistTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("CustomChoices")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelpText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChecklistTemplateId");

                    b.ToTable("ChecklistTemplateQuestions");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ComplianceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ComplianceItems");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.DCU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DCUs");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.DemandRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccomplishedLastPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActualCapex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActualCapexCurrentYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActualOpex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActualOpexCurrentYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplicationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ArchitectureRelevant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AssignedSmeId")
                        .HasColumnType("int");

                    b.Property<string>("BaselineCapex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaselineOpex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BenefitDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("BenefitStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("BenefitsPerYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Budget")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessBenefit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BusinessDriverId")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessProcessL1Id")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessProcessL2Id")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessProcessL3Id")
                        .HasColumnType("int");

                    b.Property<int?>("BusinessUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("CancelledById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CancelledOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ComplianceItemId")
                        .HasColumnType("int");

                    b.Property<string>("ConsequenceNotImplemented")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CostItPerYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DcuId")
                        .HasColumnType("int");

                    b.Property<string>("DecommissionRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DemandState")
                        .HasColumnType("int");

                    b.Property<string>("Digital")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EacCapex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EacCapexCurrentYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EacOpex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EacOpexCurrentYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("EstimatedInternalEffort")
                        .HasColumnType("int");

                    b.Property<string>("EstimatedTotalCost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExecutionType")
                        .HasColumnType("int");

                    b.Property<string>("ExecutiveShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FTEsAssigned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterfaceChanges")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsRedCab")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ItHeadId")
                        .HasColumnType("int");

                    b.Property<int?>("ItPlatformId")
                        .HasColumnType("int");

                    b.Property<int?>("ItSegmentId")
                        .HasColumnType("int");

                    b.Property<string>("KeyMessages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyMilestones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalValidationReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Methodology")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("MilestoneActualDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("MilestonePlanDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewApplication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlannedNextPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PmoReviewById")
                        .HasColumnType("int");

                    b.Property<string>("PmoReviewComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("PmoReviewedOnDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PowerSteeringId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectManagerId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectPhase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectRepositoryLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProposedPlatformId")
                        .HasColumnType("int");

                    b.Property<string>("Replicated")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequestCorrections")
                        .HasColumnType("bit");

                    b.Property<int?>("RequestCorrectionsById")
                        .HasColumnType("int");

                    b.Property<string>("RequestCorrectionsComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("RequestCorrectionsDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("RequestOwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestSponsorId")
                        .HasColumnType("int");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScopeSummary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityAssessment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("SubmittedById")
                        .HasColumnType("int");

                    b.Property<bool>("SubmittedForReview")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("SubmittedForReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TechnicalScope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopIssues")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TopRisks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersImpactedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationTypeId");

                    b.HasIndex("AssignedSmeId");

                    b.HasIndex("BusinessDriverId");

                    b.HasIndex("BusinessProcessL1Id");

                    b.HasIndex("BusinessProcessL2Id");

                    b.HasIndex("BusinessProcessL3Id");

                    b.HasIndex("BusinessUnitId");

                    b.HasIndex("CancelledById");

                    b.HasIndex("ComplianceItemId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DcuId");

                    b.HasIndex("ExecutionType");

                    b.HasIndex("ItHeadId");

                    b.HasIndex("ItPlatformId");

                    b.HasIndex("ItSegmentId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PmoReviewById");

                    b.HasIndex("ProcessAreaId");

                    b.HasIndex("ProjectManagerId");

                    b.HasIndex("RequestCorrectionsById");

                    b.HasIndex("RequestOwnerId");

                    b.HasIndex("RequestSponsorId");

                    b.HasIndex("SubmittedById");

                    b.HasIndex("UsersImpactedId");

                    b.ToTable("DemandRequests");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.DemandRequestBusinessUnit", b =>
                {
                    b.Property<int>("DemandRequestId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessUnitId")
                        .HasColumnType("int");

                    b.HasKey("DemandRequestId", "BusinessUnitId");

                    b.HasIndex("BusinessUnitId");

                    b.ToTable("DemandRequestBusinessUnits");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.DemandRequestComplianceItem", b =>
                {
                    b.Property<int>("DemandRequestId")
                        .HasColumnType("int");

                    b.Property<int>("ComplianceItemId")
                        .HasColumnType("int");

                    b.HasKey("DemandRequestId", "ComplianceItemId");

                    b.HasIndex("ComplianceItemId");

                    b.ToTable("DemandRequestComplianceItems");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ItPlatform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItPlatforms");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ItSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItSegments");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.MailItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bcc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("Sent")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MailItems");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ProcessArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcessAreas");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SecurityRole")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.UsersImpacted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersImpacted");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.Workflow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.WorkflowItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<double>("SequenceNumber")
                        .HasColumnType("float");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowId")
                        .HasColumnType("int");

                    b.Property<int>("WorkflowItemType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowItems");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.Attachment", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ItDemand.Domain.Models.DemandRequest", "DemandRequest")
                        .WithMany("Attachments")
                        .HasForeignKey("DemandRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DemandRequest");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessProcessL2", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.BusinessProcessL1", "BusinessProcessL1")
                        .WithMany()
                        .HasForeignKey("BusinessProcessL1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProcessL1");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessProcessL3", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.BusinessProcessL2", "BusinessProcessL2")
                        .WithMany()
                        .HasForeignKey("BusinessProcessL2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessProcessL2");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessUnit", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.User", "ItHead")
                        .WithMany()
                        .HasForeignKey("ItHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItHead");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.Checklist", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.ChecklistTemplate", "ChecklistTemplate")
                        .WithMany()
                        .HasForeignKey("ChecklistTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItDemand.Domain.Models.DemandRequest", "DemandRequest")
                        .WithMany("Checklists")
                        .HasForeignKey("DemandRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItDemand.Domain.Models.WorkflowItem", "WorkflowItem")
                        .WithMany()
                        .HasForeignKey("WorkflowItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChecklistTemplate");

                    b.Navigation("DemandRequest");

                    b.Navigation("WorkflowItem");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistApprover", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("ItDemand.Domain.Models.Checklist", "Checklist")
                        .WithMany("Approvers")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistQuestion", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.Checklist", "Checklist")
                        .WithMany("Questions")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistTemplate", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.WorkflowItem", "WorkflowItem")
                        .WithMany("ChecklistTemplates")
                        .HasForeignKey("WorkflowItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowItem");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistTemplateApprover", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.ChecklistTemplate", "ChecklistTemplate")
                        .WithMany("Approvers")
                        .HasForeignKey("ChecklistTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChecklistTemplate");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistTemplateQuestion", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.ChecklistTemplate", "ChecklistTemplate")
                        .WithMany("Questions")
                        .HasForeignKey("ChecklistTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChecklistTemplate");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.DemandRequest", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.ApplicationType", "ApplicationType")
                        .WithMany()
                        .HasForeignKey("ApplicationTypeId");

                    b.HasOne("ItDemand.Domain.Models.User", "AssignedSme")
                        .WithMany()
                        .HasForeignKey("AssignedSmeId");

                    b.HasOne("ItDemand.Domain.Models.BusinessDriver", "BusinessDriver")
                        .WithMany()
                        .HasForeignKey("BusinessDriverId");

                    b.HasOne("ItDemand.Domain.Models.BusinessProcessL1", "BusinessProcessL1")
                        .WithMany()
                        .HasForeignKey("BusinessProcessL1Id");

                    b.HasOne("ItDemand.Domain.Models.BusinessProcessL2", "BusinessProcessL2")
                        .WithMany()
                        .HasForeignKey("BusinessProcessL2Id");

                    b.HasOne("ItDemand.Domain.Models.BusinessProcessL3", "BusinessProcessL3")
                        .WithMany()
                        .HasForeignKey("BusinessProcessL3Id");

                    b.HasOne("ItDemand.Domain.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("DemandRequests")
                        .HasForeignKey("BusinessUnitId");

                    b.HasOne("ItDemand.Domain.Models.User", "CancelledBy")
                        .WithMany()
                        .HasForeignKey("CancelledById");

                    b.HasOne("ItDemand.Domain.Models.ComplianceItem", null)
                        .WithMany("DemandRequests")
                        .HasForeignKey("ComplianceItemId");

                    b.HasOne("ItDemand.Domain.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("ItDemand.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ItDemand.Domain.Models.DCU", "Dcu")
                        .WithMany()
                        .HasForeignKey("DcuId");

                    b.HasOne("ItDemand.Domain.Models.Workflow", "Workflows")
                        .WithMany()
                        .HasForeignKey("ExecutionType");

                    b.HasOne("ItDemand.Domain.Models.User", "ItHead")
                        .WithMany()
                        .HasForeignKey("ItHeadId");

                    b.HasOne("ItDemand.Domain.Models.ItPlatform", "ProposedPlatform")
                        .WithMany()
                        .HasForeignKey("ItPlatformId");

                    b.HasOne("ItDemand.Domain.Models.ItSegment", "ItSegment")
                        .WithMany()
                        .HasForeignKey("ItSegmentId");

                    b.HasOne("ItDemand.Domain.Models.User", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("ItDemand.Domain.Models.User", "PmoReviewBy")
                        .WithMany()
                        .HasForeignKey("PmoReviewById");

                    b.HasOne("ItDemand.Domain.Models.ProcessArea", "ProcessArea")
                        .WithMany()
                        .HasForeignKey("ProcessAreaId");

                    b.HasOne("ItDemand.Domain.Models.User", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId");

                    b.HasOne("ItDemand.Domain.Models.User", "RequestCorrectionsBy")
                        .WithMany()
                        .HasForeignKey("RequestCorrectionsById");

                    b.HasOne("ItDemand.Domain.Models.User", "RequestOwner")
                        .WithMany()
                        .HasForeignKey("RequestOwnerId");

                    b.HasOne("ItDemand.Domain.Models.User", "RequestSponsor")
                        .WithMany()
                        .HasForeignKey("RequestSponsorId");

                    b.HasOne("ItDemand.Domain.Models.User", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById");

                    b.HasOne("ItDemand.Domain.Models.UsersImpacted", "UsersImpacted")
                        .WithMany()
                        .HasForeignKey("UsersImpactedId");

                    b.Navigation("ApplicationType");

                    b.Navigation("AssignedSme");

                    b.Navigation("BusinessDriver");

                    b.Navigation("BusinessProcessL1");

                    b.Navigation("BusinessProcessL2");

                    b.Navigation("BusinessProcessL3");

                    b.Navigation("BusinessUnit");

                    b.Navigation("CancelledBy");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("Dcu");

                    b.Navigation("ItHead");

                    b.Navigation("ItSegment");

                    b.Navigation("ModifiedBy");

                    b.Navigation("PmoReviewBy");

                    b.Navigation("ProcessArea");

                    b.Navigation("ProjectManager");

                    b.Navigation("ProposedPlatform");

                    b.Navigation("RequestCorrectionsBy");

                    b.Navigation("RequestOwner");

                    b.Navigation("RequestSponsor");

                    b.Navigation("SubmittedBy");

                    b.Navigation("UsersImpacted");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.DemandRequestBusinessUnit", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.BusinessUnit", "BusinessUnit")
                        .WithMany()
                        .HasForeignKey("BusinessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItDemand.Domain.Models.DemandRequest", "DemandRequest")
                        .WithMany("AffectedBusinessUnits")
                        .HasForeignKey("DemandRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusinessUnit");

                    b.Navigation("DemandRequest");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.DemandRequestComplianceItem", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.ComplianceItem", "ComplianceItem")
                        .WithMany()
                        .HasForeignKey("ComplianceItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ItDemand.Domain.Models.DemandRequest", "DemandRequest")
                        .WithMany("ComplianceRelevant")
                        .HasForeignKey("DemandRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComplianceItem");

                    b.Navigation("DemandRequest");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.WorkflowItem", b =>
                {
                    b.HasOne("ItDemand.Domain.Models.WorkflowItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("ItDemand.Domain.Models.Workflow", "Workflow")
                        .WithMany("Items")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.BusinessUnit", b =>
                {
                    b.Navigation("DemandRequests");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.Checklist", b =>
                {
                    b.Navigation("Approvers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ChecklistTemplate", b =>
                {
                    b.Navigation("Approvers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.ComplianceItem", b =>
                {
                    b.Navigation("DemandRequests");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.DemandRequest", b =>
                {
                    b.Navigation("AffectedBusinessUnits");

                    b.Navigation("Attachments");

                    b.Navigation("Checklists");

                    b.Navigation("ComplianceRelevant");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.Workflow", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ItDemand.Domain.Models.WorkflowItem", b =>
                {
                    b.Navigation("ChecklistTemplates");

                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
